<?xml version="1.0" encoding="UTF-8"?>
<!-- Every 10 seconds this balancer will generate a report using the createReport 
	method of the Generator class. It then sends the generated report to the 
	mina1 server. If the mina1 server fails, it will start sending it to the 
	mina2 server until the mina1 server is back again. It is important to notice 
	that this balancer will always attempt to send his reports to the mina1 server 
	first no matter what, and it will only send them to the mina2 server if mina1 
	is not responding. The mina servers will eventually reply, and once that 
	happens the balancer simply outputs the result to the console. -->

<!-- START SNIPPET: e1 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<bean id="service" class="org.apache.camel.example.service.Generator" />

	<camelContext xmlns="http://camel.apache.org/schema/spring">

		<!-- Generate the report every 10 seconds using the Generator.java class -->
		<route id="sendMessage">
			<from uri="timer://org.apache.camel.example.loadbalancer?period=10s" />
			<bean ref="service" method="createReport" />
			<to uri="direct:loadbalance" />
		</route>

		<!-- use the load balancer pattern with the fail over construct in case 
			of failure -->
		<route id="loadbalancer">
			<from uri="direct:loadbalance" />
			<loadBalance inheritErrorHandler="false">
				<failover />
				<to uri="mina:tcp://localhost:9991?sync=true" />
				<to uri="mina:tcp://localhost:9992?sync=true" />
			</loadBalance>
			<log message="${body}" />
		</route>

	</camelContext>

</beans>
<!-- END SNIPPET: e1 -->